/*
Package octel is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /Users/nleiva/go/src/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- ../../yang/telemetry/openconfig-telemetry.modified.yang
	- openconfig-telemetry-types.yang
Imported modules were sourced from:
	- ../../yang/...
*/
package octel

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	TelemetrySystem	*TelemetrySystem	`path:"telemetry-system" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem represents the /openconfig-telemetry/telemetry-system YANG schema element.
type TelemetrySystem struct {
	DestinationGroup	map[string]*TelemetrySystem_DestinationGroup	`path:"destination-groups/destination-group" module:"openconfig-telemetry"`
	SensorGroup	map[string]*TelemetrySystem_SensorGroup	`path:"sensor-groups/sensor-group" module:"openconfig-telemetry"`
	Subscriptions	*TelemetrySystem_Subscriptions	`path:"subscriptions" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem) IsYANGGoStruct() {}

// NewDestinationGroup creates a new entry in the DestinationGroup list of the
// TelemetrySystem struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem) NewDestinationGroup(GroupId string) (*TelemetrySystem_DestinationGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*TelemetrySystem_DestinationGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationGroup", key)
	}

	t.DestinationGroup[key] = &TelemetrySystem_DestinationGroup{
		GroupId: &GroupId,
	}

	return t.DestinationGroup[key], nil
}

// NewSensorGroup creates a new entry in the SensorGroup list of the
// TelemetrySystem struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem) NewSensorGroup(SensorGroupId string) (*TelemetrySystem_SensorGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorGroup == nil {
		t.SensorGroup = make(map[string]*TelemetrySystem_SensorGroup)
	}

	key := SensorGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorGroup", key)
	}

	t.SensorGroup[key] = &TelemetrySystem_SensorGroup{
		SensorGroupId: &SensorGroupId,
	}

	return t.SensorGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_DestinationGroup represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group YANG schema element.
type TelemetrySystem_DestinationGroup struct {
	Destination	map[TelemetrySystem_DestinationGroup_Destination_Key]*TelemetrySystem_DestinationGroup_Destination	`path:"destinations/destination" module:"openconfig-telemetry"`
	GroupId	*string	`path:"config/group-id|group-id" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_DestinationGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_DestinationGroup) IsYANGGoStruct() {}

// TelemetrySystem_DestinationGroup_Destination_Key represents the key for list Destination of element /openconfig-telemetry/telemetry-system/destination-groups/destination-group.
type TelemetrySystem_DestinationGroup_Destination_Key struct {
	DestinationAddress	string	`path:"destination-address"`
	DestinationPort	uint16	`path:"destination-port"`
}

// NewDestination creates a new entry in the Destination list of the
// TelemetrySystem_DestinationGroup struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_DestinationGroup) NewDestination(DestinationAddress string, DestinationPort uint16) (*TelemetrySystem_DestinationGroup_Destination, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[TelemetrySystem_DestinationGroup_Destination_Key]*TelemetrySystem_DestinationGroup_Destination)
	}

	key := TelemetrySystem_DestinationGroup_Destination_Key{
		DestinationAddress: DestinationAddress,
		DestinationPort: DestinationPort,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &TelemetrySystem_DestinationGroup_Destination{
		DestinationAddress: &DestinationAddress,
		DestinationPort: &DestinationPort,
	}

	return t.Destination[key], nil
}

// ΛListKeyMap returns the keys of the TelemetrySystem_DestinationGroup struct, which is a YANG list entry.
func (t *TelemetrySystem_DestinationGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_DestinationGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_DestinationGroup"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_DestinationGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_DestinationGroup_Destination represents the /openconfig-telemetry/telemetry-system/destination-groups/destination-group/destinations/destination YANG schema element.
type TelemetrySystem_DestinationGroup_Destination struct {
	DestinationAddress	*string	`path:"config/destination-address|destination-address" module:"openconfig-telemetry"`
	DestinationPort	*uint16	`path:"config/destination-port|destination-port" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_DestinationGroup_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_DestinationGroup_Destination) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the TelemetrySystem_DestinationGroup_Destination struct, which is a YANG list entry.
func (t *TelemetrySystem_DestinationGroup_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationAddress == nil {
		return nil, fmt.Errorf("nil value for key DestinationAddress")
	}

	if t.DestinationPort == nil {
		return nil, fmt.Errorf("nil value for key DestinationPort")
	}

	return map[string]interface{}{
		"destination-address": *t.DestinationAddress,
		"destination-port": *t.DestinationPort,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_DestinationGroup_Destination) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_DestinationGroup_Destination"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_DestinationGroup_Destination) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_SensorGroup represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group YANG schema element.
type TelemetrySystem_SensorGroup struct {
	SensorGroupId	*string	`path:"config/sensor-group-id|sensor-group-id" module:"openconfig-telemetry"`
	SensorPath	map[string]*TelemetrySystem_SensorGroup_SensorPath	`path:"sensor-paths/sensor-path" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_SensorGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_SensorGroup) IsYANGGoStruct() {}

// NewSensorPath creates a new entry in the SensorPath list of the
// TelemetrySystem_SensorGroup struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_SensorGroup) NewSensorPath(Path string) (*TelemetrySystem_SensorGroup_SensorPath, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorPath == nil {
		t.SensorPath = make(map[string]*TelemetrySystem_SensorGroup_SensorPath)
	}

	key := Path

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorPath", key)
	}

	t.SensorPath[key] = &TelemetrySystem_SensorGroup_SensorPath{
		Path: &Path,
	}

	return t.SensorPath[key], nil
}

// ΛListKeyMap returns the keys of the TelemetrySystem_SensorGroup struct, which is a YANG list entry.
func (t *TelemetrySystem_SensorGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SensorGroupId == nil {
		return nil, fmt.Errorf("nil value for key SensorGroupId")
	}

	return map[string]interface{}{
		"sensor-group-id": *t.SensorGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_SensorGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_SensorGroup"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_SensorGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_SensorGroup_SensorPath represents the /openconfig-telemetry/telemetry-system/sensor-groups/sensor-group/sensor-paths/sensor-path YANG schema element.
type TelemetrySystem_SensorGroup_SensorPath struct {
	ExcludeFilter	*string	`path:"config/exclude-filter" module:"openconfig-telemetry"`
	Path	*string	`path:"config/path|path" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_SensorGroup_SensorPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_SensorGroup_SensorPath) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the TelemetrySystem_SensorGroup_SensorPath struct, which is a YANG list entry.
func (t *TelemetrySystem_SensorGroup_SensorPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"path": *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_SensorGroup_SensorPath) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_SensorGroup_SensorPath"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_SensorGroup_SensorPath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_Subscriptions represents the /openconfig-telemetry/telemetry-system/subscriptions YANG schema element.
type TelemetrySystem_Subscriptions struct {
	DynamicSubscription	map[uint64]*TelemetrySystem_Subscriptions_DynamicSubscription	`path:"dynamic-subscriptions/dynamic-subscription" module:"openconfig-telemetry"`
	Subscription	map[string]*TelemetrySystem_Subscriptions_Subscription	`path:"persistent/subscription" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions) IsYANGGoStruct() {}

// NewDynamicSubscription creates a new entry in the DynamicSubscription list of the
// TelemetrySystem_Subscriptions struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions) NewDynamicSubscription(Id uint64) (*TelemetrySystem_Subscriptions_DynamicSubscription, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DynamicSubscription == nil {
		t.DynamicSubscription = make(map[uint64]*TelemetrySystem_Subscriptions_DynamicSubscription)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DynamicSubscription[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DynamicSubscription", key)
	}

	t.DynamicSubscription[key] = &TelemetrySystem_Subscriptions_DynamicSubscription{
		Id: &Id,
	}

	return t.DynamicSubscription[key], nil
}

// NewSubscription creates a new entry in the Subscription list of the
// TelemetrySystem_Subscriptions struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions) NewSubscription(SubscriptionId string) (*TelemetrySystem_Subscriptions_Subscription, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscription == nil {
		t.Subscription = make(map[string]*TelemetrySystem_Subscriptions_Subscription)
	}

	key := SubscriptionId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subscription[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subscription", key)
	}

	t.Subscription[key] = &TelemetrySystem_Subscriptions_Subscription{
		SubscriptionId: &SubscriptionId,
	}

	return t.Subscription[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_Subscriptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_Subscriptions_DynamicSubscription represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription struct {
	DestinationAddress	*string	`path:"state/destination-address" module:"openconfig-telemetry"`
	DestinationPort	*uint16	`path:"state/destination-port" module:"openconfig-telemetry"`
	Encoding	E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD	`path:"state/encoding" module:"openconfig-telemetry"`
	HeartbeatInterval	*uint64	`path:"state/heartbeat-interval" module:"openconfig-telemetry"`
	Id	*uint64	`path:"state/id|id" module:"openconfig-telemetry"`
	OriginatedQosMarking	*uint8	`path:"state/originated-qos-marking" module:"openconfig-telemetry"`
	Protocol	E_OpenconfigTelemetryTypes_STREAM_PROTOCOL	`path:"state/protocol" module:"openconfig-telemetry"`
	SampleInterval	*uint64	`path:"state/sample-interval" module:"openconfig-telemetry"`
	SensorPath	map[string]*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath	`path:"sensor-paths/sensor-path" module:"openconfig-telemetry"`
	SuppressRedundant	*bool	`path:"state/suppress-redundant" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_DynamicSubscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_DynamicSubscription) IsYANGGoStruct() {}

// NewSensorPath creates a new entry in the SensorPath list of the
// TelemetrySystem_Subscriptions_DynamicSubscription struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) NewSensorPath(Path string) (*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorPath == nil {
		t.SensorPath = make(map[string]*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath)
	}

	key := Path

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorPath", key)
	}

	t.SensorPath[key] = &TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath{
		Path: &Path,
	}

	return t.SensorPath[key], nil
}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_DynamicSubscription struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_Subscriptions_DynamicSubscription) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_DynamicSubscription"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath represents the /openconfig-telemetry/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/sensor-paths/sensor-path YANG schema element.
type TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath struct {
	ExcludeFilter	*string	`path:"state/exclude-filter" module:"openconfig-telemetry"`
	Path	*string	`path:"state/path|path" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Path == nil {
		return nil, fmt.Errorf("nil value for key Path")
	}

	return map[string]interface{}{
		"path": *t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_DynamicSubscription_SensorPath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_Subscriptions_Subscription represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent/subscription YANG schema element.
type TelemetrySystem_Subscriptions_Subscription struct {
	DestinationGroup	map[string]*TelemetrySystem_Subscriptions_Subscription_DestinationGroup	`path:"destination-groups/destination-group" module:"openconfig-telemetry"`
	Encoding	E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD	`path:"config/encoding" module:"openconfig-telemetry"`
	Id	*uint64	`path:"state/id" module:"openconfig-telemetry"`
	LocalSourceAddress	*string	`path:"config/local-source-address" module:"openconfig-telemetry"`
	OriginatedQosMarking	*uint8	`path:"config/originated-qos-marking" module:"openconfig-telemetry"`
	Protocol	E_OpenconfigTelemetryTypes_STREAM_PROTOCOL	`path:"config/protocol" module:"openconfig-telemetry"`
	SensorProfile	map[string]*TelemetrySystem_Subscriptions_Subscription_SensorProfile	`path:"sensor-profiles/sensor-profile" module:"openconfig-telemetry"`
	SubscriptionId	*string	`path:"config/subscription-id|subscription-id" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_Subscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_Subscription) IsYANGGoStruct() {}

// NewDestinationGroup creates a new entry in the DestinationGroup list of the
// TelemetrySystem_Subscriptions_Subscription struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions_Subscription) NewDestinationGroup(GroupId string) (*TelemetrySystem_Subscriptions_Subscription_DestinationGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*TelemetrySystem_Subscriptions_Subscription_DestinationGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationGroup", key)
	}

	t.DestinationGroup[key] = &TelemetrySystem_Subscriptions_Subscription_DestinationGroup{
		GroupId: &GroupId,
	}

	return t.DestinationGroup[key], nil
}

// NewSensorProfile creates a new entry in the SensorProfile list of the
// TelemetrySystem_Subscriptions_Subscription struct. The keys of the list are populated from the input
// arguments.
func (t *TelemetrySystem_Subscriptions_Subscription) NewSensorProfile(SensorGroup string) (*TelemetrySystem_Subscriptions_Subscription_SensorProfile, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorProfile == nil {
		t.SensorProfile = make(map[string]*TelemetrySystem_Subscriptions_Subscription_SensorProfile)
	}

	key := SensorGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorProfile", key)
	}

	t.SensorProfile[key] = &TelemetrySystem_Subscriptions_Subscription_SensorProfile{
		SensorGroup: &SensorGroup,
	}

	return t.SensorProfile[key], nil
}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_Subscription struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_Subscription) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SubscriptionId == nil {
		return nil, fmt.Errorf("nil value for key SubscriptionId")
	}

	return map[string]interface{}{
		"subscription-id": *t.SubscriptionId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_Subscriptions_Subscription) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_Subscription"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_Subscription) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_Subscriptions_Subscription_DestinationGroup represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent/subscription/destination-groups/destination-group YANG schema element.
type TelemetrySystem_Subscriptions_Subscription_DestinationGroup struct {
	GroupId	*string	`path:"config/group-id|group-id" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_Subscription_DestinationGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_Subscription_DestinationGroup) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_Subscription_DestinationGroup struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_Subscription_DestinationGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_Subscriptions_Subscription_DestinationGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_Subscription_DestinationGroup"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_Subscription_DestinationGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// TelemetrySystem_Subscriptions_Subscription_SensorProfile represents the /openconfig-telemetry/telemetry-system/subscriptions/persistent/subscription/sensor-profiles/sensor-profile YANG schema element.
type TelemetrySystem_Subscriptions_Subscription_SensorProfile struct {
	HeartbeatInterval	*uint64	`path:"config/heartbeat-interval" module:"openconfig-telemetry"`
	SampleInterval	*uint64	`path:"config/sample-interval" module:"openconfig-telemetry"`
	SensorGroup	*string	`path:"config/sensor-group|sensor-group" module:"openconfig-telemetry"`
	SuppressRedundant	*bool	`path:"config/suppress-redundant" module:"openconfig-telemetry"`
}

// IsYANGGoStruct ensures that TelemetrySystem_Subscriptions_Subscription_SensorProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*TelemetrySystem_Subscriptions_Subscription_SensorProfile) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the TelemetrySystem_Subscriptions_Subscription_SensorProfile struct, which is a YANG list entry.
func (t *TelemetrySystem_Subscriptions_Subscription_SensorProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SensorGroup == nil {
		return nil, fmt.Errorf("nil value for key SensorGroup")
	}

	return map[string]interface{}{
		"sensor-group": *t.SensorGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *TelemetrySystem_Subscriptions_Subscription_SensorProfile) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["TelemetrySystem_Subscriptions_Subscription_SensorProfile"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *TelemetrySystem_Subscriptions_Subscription_SensorProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD is a derived int64 type which is used to represent
// the enumerated node OpenconfigTelemetryTypes_DATA_ENCODING_METHOD. An additional value named
// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD int64

// IsYANGGoEnum ensures that OpenconfigTelemetryTypes_DATA_ENCODING_METHOD implements the yang.GoEnum
// interface. This ensures that OpenconfigTelemetryTypes_DATA_ENCODING_METHOD can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTelemetryTypes_DATA_ENCODING_METHOD.
func (E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_UNSET corresponds to the value UNSET of OpenconfigTelemetryTypes_DATA_ENCODING_METHOD
	OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_UNSET E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD = 0
	// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_JSON_IETF corresponds to the value ENC_JSON_IETF of OpenconfigTelemetryTypes_DATA_ENCODING_METHOD
	OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_JSON_IETF E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD = 1
	// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_PROTO3 corresponds to the value ENC_PROTO3 of OpenconfigTelemetryTypes_DATA_ENCODING_METHOD
	OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_PROTO3 E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD = 2
	// OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_XML corresponds to the value ENC_XML of OpenconfigTelemetryTypes_DATA_ENCODING_METHOD
	OpenconfigTelemetryTypes_DATA_ENCODING_METHOD_ENC_XML E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD = 3
)


// E_OpenconfigTelemetryTypes_STREAM_PROTOCOL is a derived int64 type which is used to represent
// the enumerated node OpenconfigTelemetryTypes_STREAM_PROTOCOL. An additional value named
// OpenconfigTelemetryTypes_STREAM_PROTOCOL_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTelemetryTypes_STREAM_PROTOCOL int64

// IsYANGGoEnum ensures that OpenconfigTelemetryTypes_STREAM_PROTOCOL implements the yang.GoEnum
// interface. This ensures that OpenconfigTelemetryTypes_STREAM_PROTOCOL can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTelemetryTypes_STREAM_PROTOCOL) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTelemetryTypes_STREAM_PROTOCOL.
func (E_OpenconfigTelemetryTypes_STREAM_PROTOCOL) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_UNSET corresponds to the value UNSET of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_UNSET E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 0
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_GRPC corresponds to the value STREAM_GRPC of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_GRPC E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 1
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_JSON_RPC corresponds to the value STREAM_JSON_RPC of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_JSON_RPC E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 2
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_SSH corresponds to the value STREAM_SSH of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_SSH E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 3
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_THRIFT_RPC corresponds to the value STREAM_THRIFT_RPC of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_THRIFT_RPC E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 4
	// OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_WEBSOCKET_RPC corresponds to the value STREAM_WEBSOCKET_RPC of OpenconfigTelemetryTypes_STREAM_PROTOCOL
	OpenconfigTelemetryTypes_STREAM_PROTOCOL_STREAM_WEBSOCKET_RPC E_OpenconfigTelemetryTypes_STREAM_PROTOCOL = 5
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD": {
		1: {Name: "ENC_JSON_IETF", DefiningModule: "openconfig-telemetry-types"},
		2: {Name: "ENC_PROTO3", DefiningModule: "openconfig-telemetry-types"},
		3: {Name: "ENC_XML", DefiningModule: "openconfig-telemetry-types"},
	},
	"E_OpenconfigTelemetryTypes_STREAM_PROTOCOL": {
		1: {Name: "STREAM_GRPC", DefiningModule: "openconfig-telemetry-types"},
		2: {Name: "STREAM_JSON_RPC", DefiningModule: "openconfig-telemetry-types"},
		3: {Name: "STREAM_SSH", DefiningModule: "openconfig-telemetry-types"},
		4: {Name: "STREAM_THRIFT_RPC", DefiningModule: "openconfig-telemetry-types"},
		5: {Name: "STREAM_WEBSOCKET_RPC", DefiningModule: "openconfig-telemetry-types"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x5d, 0x4f, 0xe3, 0x48,
		0xd3, 0xbd, 0xe7, 0x57, 0x20, 0x6b, 0x2f, 0x88, 0x84, 0x87, 0x84, 0x7c, 0x00, 0xb9, 0x63, 0x20,
		0x0c, 0x3c, 0x33, 0x10, 0x44, 0xa2, 0xdd, 0x95, 0x98, 0x2c, 0xf2, 0x24, 0x0d, 0x63, 0x6d, 0xb0,
		0xb3, 0xb6, 0x33, 0xef, 0x20, 0xe2, 0xff, 0xfe, 0x0a, 0x27, 0x18, 0x3b, 0xb6, 0x83, 0xdd, 0x5d,
		0x6d, 0x3b, 0xe1, 0x8c, 0x46, 0x22, 0x71, 0xec, 0x72, 0x7f, 0x54, 0x55, 0x9f, 0xae, 0xae, 0x3e,
		0xfd, 0xbc, 0xb5, 0xbd, 0xbd, 0xbd, 0xad, 0x5c, 0x69, 0x8f, 0x4c, 0x69, 0x6f, 0x2b, 0x23, 0xf6,
		0x4b, 0x1f, 0x32, 0x65, 0x77, 0x7e, 0xf5, 0xab, 0x6e, 0x8c, 0x94, 0xf6, 0x76, 0x6d, 0xf1, 0xf5,
		0xc4, 0x34, 0xee, 0xf5, 0x07, 0xa5, 0xbd, 0x5d, 0x5d, 0x5c, 0x38, 0xd5, 0x2d, 0xa5, 0xbd, 0x3d,
		0x17, 0xe1, 0x5d, 0x70, 0xd8, 0x98, 0x3d, 0x32, 0xc7, 0x7a, 0x52, 0xed, 0x27, 0xdb, 0x61, 0x8f,
		0xa1, 0x5f, 0x43, 0x2f, 0x8a, 0xdc, 0xb9, 0x1b, 0xbe, 0x2f, 0xfc, 0x6a, 0xff, 0xf2, 0x72, 0x11,
		0xfc, 0x1f, 0xae, 0x2d, 0x76, 0xaf, 0xff, 0x8e, 0xbc, 0x2f, 0xf4, 0x4e, 0x73, 0xa8, 0xfa, 0xaf,
		0x5d, 0x7a, 0x9f, 0x77, 0x5f, 0xcf, 0x9c, 0x5a, 0x43, 0x16, 0x2b, 0x63, 0x5e, 0x26, 0xf6, 0xf4,
		0x7f, 0xa6, 0xf5, 0x52, 0x2c, 0x65, 0x32, 0x7f, 0xdd, 0x6e, 0xfc, 0x8d, 0xe7, 0x9a, 0x7d, 0x6c,
		0x3d, 0x4c, 0x1f, 0x99, 0xe1, 0x28, 0xed, 0x6d, 0xc7, 0x9a, 0xb2, 0x84, 0x1b, 0x03, 0x77, 0x85,
		0x4b, 0x17, 0xb9, 0xdd, 0x0d, 0x5d, 0x71, 0x97, 0x6a, 0xbf, 0xdc, 0x11, 0xfe, 0x0f, 0x23, 0x66,
		0x3b, 0xba, 0xa1, 0x39, 0xba, 0x69, 0xa8, 0x0f, 0x96, 0x39, 0x9d, 0xd8, 0xc9, 0xd5, 0x7b, 0xd3,
		0x81, 0xc8, 0x33, 0x09, 0xc5, 0x8f, 0xef, 0xa4, 0x77, 0x3b, 0x2b, 0x4d, 0xa7, 0x65, 0xed, 0xbc,
		0xb4, 0x9d, 0x98, 0xb9, 0x33, 0x33, 0x77, 0x2a, 0x47, 0xe7, 0xc6, 0x77, 0x72, 0x42, 0x67, 0xbf,
		0xdb, 0xe9, 0xc9, 0x9d, 0xff, 0x7e, 0xab, 0x24, 0xea, 0xc0, 0x7b, 0xad, 0xb3, 0x5a, 0x15, 0x52,
		0xab, 0x44, 0x16, 0xd5, 0xe0, 0x55, 0x91, 0xac, 0xaa, 0xc2, 0xad, 0x32, 0xdc, 0xaa, 0x23, 0xa0,
		0x42, 0xab, 0x55, 0xe9, 0x1d, 0x95, 0x4a, 0xad, 0x5a, 0xfe, 0x8d, 0xc3, 0xd7, 0xfe, 0x4c, 0xd9,
		0x84, 0xaf, 0x5d, 0xb5, 0x78, 0x2e, 0x65, 0x33, 0xa4, 0x53, 0xae, 0xcc, 0x4a, 0xc6, 0xa3, 0x6c,
		0xa2, 0x4a, 0xc7, 0xab, 0x7c, 0xc2, 0x4a, 0x28, 0xac, 0x8c, 0x04, 0x4a, 0x99, 0x4e, 0x39, 0x53,
		0x2a, 0x69, 0x66, 0x65, 0xf5, 0x1f, 0xf0, 0x1c, 0x9a, 0xaa, 0x8f, 0xb2, 0x37, 0xfe, 0x6b, 0xa7,
		0xfb, 0x12, 0x32, 0x36, 0xdd, 0x42, 0x91, 0xab, 0x19, 0x1f, 0xcb, 0xaa, 0xd0, 0x22, 0x8a, 0x4d,
		0xa5, 0xe0, 0xa2, 0x8a, 0x4e, 0xa6, 0xf0, 0x64, 0x8a, 0x4f, 0x68, 0x00, 0xd9, 0x0c, 0x21, 0xa3,
		0x41, 0xf8, 0xe5, 0xec, 0x3f, 0x4d, 0x98, 0x58, 0xdf, 0xdb, 0x8e, 0xa5, 0x1b, 0x0f, 0x3c, 0xbd,
		0xfe, 0xea, 0xb2, 0x0f, 0xb7, 0xe4, 0xb4, 0x07, 0xad, 0x0b, 0x39, 0x36, 0x0c, 0xd3, 0xf1, 0xd0,
		0x4e, 0x36, 0x4f, 0x62, 0x0f, 0x7f, 0xb2, 0x47, 0x6d, 0xa2, 0x39, 0x3f, 0x5f, 0x5a, 0x6b, 0xcf,
		0x9c, 0x30, 0x63, 0x3e, 0xb2, 0xbd, 0x29, 0xc5, 0xde, 0xf2, 0x4c, 0x67, 0x2f, 0x8a, 0xaf, 0xa3,
		0x97, 0xf6, 0x16, 0x03, 0xe4, 0x16, 0x4d, 0x5b, 0xa4, 0x68, 0x87, 0x20, 0xe4, 0xb3, 0xb3, 0x0f,
		0xe8, 0xa1, 0xa7, 0x31, 0xac, 0x63, 0x58, 0xcf, 0x7f, 0x58, 0x0f, 0xa8, 0x20, 0xff, 0xc8, 0x1e,
		0x14, 0xc2, 0x37, 0xb8, 0xd7, 0x30, 0xb8, 0x63, 0x70, 0x97, 0x3f, 0xb8, 0x67, 0x35, 0x0f, 0xde,
		0x29, 0x1b, 0xcd, 0x14, 0x8e, 0xc8, 0x58, 0x84, 0x8d, 0x86, 0xc2, 0x78, 0xa8, 0x8d, 0x88, 0xca,
		0x98, 0xc8, 0x8d, 0x8a, 0xdc, 0xb8, 0x24, 0x18, 0x19, 0x9f, 0xb1, 0x71, 0x1a, 0x9d, 0xb0, 0xf1,
		0xc5, 0x86, 0xe6, 0xb4, 0xd1, 0xc8, 0x62, 0xb6, 0x2d, 0xde, 0xef, 0x71, 0xc1, 0xbb, 0x57, 0xe1,
		0x82, 0x1d, 0xc6, 0x37, 0x71, 0x25, 0x37, 0x5b, 0x4a, 0xf3, 0x95, 0x65, 0xc6, 0xd4, 0xe6, 0x2c,
		0xcd, 0xac, 0xa5, 0x99, 0xb7, 0x44, 0x33, 0x17, 0x33, 0x77, 0x41, 0xb3, 0x17, 0x9f, 0x58, 0x27,
		0xea, 0x9e, 0x3e, 0x21, 0xb2, 0xd4, 0xd0, 0xe0, 0x7a, 0x44, 0x20, 0x6b, 0x51, 0xd7, 0x5b, 0x12,
		0x8d, 0xa0, 0xb1, 0x84, 0xa5, 0x96, 0xfb, 0xd5, 0x20, 0x6c, 0xbb, 0x68, 0x00, 0x83, 0x50, 0xe6,
		0xb5, 0xe6, 0x38, 0xcc, 0x32, 0xc8, 0x9a, 0xd3, 0x17, 0xfc, 0xcf, 0xce, 0xce, 0x6d, 0x55, 0x3d,
		0x1a, 0xcc, 0x6e, 0x6b, 0xea, 0xd1, 0x60, 0xfe, 0xb1, 0xe6, 0xfd, 0x99, 0x7f, 0xde, 0xbf, 0xad,
		0xaa, 0x8d, 0xd7, 0xcf, 0xcd, 0xdb, 0xaa, 0xda, 0x1c, 0x54, 0xbe, 0x7f, 0xff, 0x54, 0x79, 0xae,
		0xbb, 0xd9, 0x1f, 0xfc, 0x43, 0x21, 0x2b, 0xfc, 0x80, 0x44, 0x92, 0xbb, 0x5b, 0x62, 0xe5, 0x6c,
		0x41, 0x39, 0xe7, 0xca, 0xa9, 0xa9, 0xf7, 0xc7, 0xea, 0xd9, 0xe0, 0xb9, 0xb6, 0xdb, 0x70, 0xdb,
		0x95, 0xe7, 0x03, 0x77, 0xf9, 0xe2, 0x2c, 0xee, 0xb6, 0xda, 0xee, 0x81, 0xdb, 0x4e, 0xf8, 0xa5,
		0xe5, 0xb6, 0x53, 0xca, 0x68, 0xba, 0x3b, 0x91, 0x5b, 0x5f, 0xae, 0xef, 0x27, 0x3d, 0xd0, 0x48,
		0x78, 0xa0, 0x9e, 0xf4, 0x40, 0x3d, 0xe1, 0x81, 0xc4, 0x22, 0xed, 0x27, 0x3c, 0xd0, 0x74, 0x67,
		0x91, 0xfb, 0x77, 0xe2, 0x6f, 0x6d, 0xb9, 0x95, 0x59, 0xd2, 0x6f, 0x07, 0xee, 0xac, 0x5d, 0x29,
		0xa1, 0xa9, 0x6e, 0x15, 0x5b, 0x0e, 0xfe, 0xf7, 0x0b, 0x38, 0x99, 0x10, 0x20, 0x9f, 0x98, 0x96,
		0x23, 0x07, 0xea, 0x7b, 0x92, 0x81, 0xf3, 0x81, 0xf3, 0x81, 0xf3, 0x4b, 0x8b, 0xf3, 0xa7, 0xba,
		0xe1, 0xd4, 0x5a, 0x84, 0x18, 0xbf, 0x45, 0x20, 0xea, 0x46, 0x33, 0x1e, 0x4a, 0x89, 0xf1, 0x2f,
		0x75, 0x83, 0xcc, 0xac, 0x88, 0x5d, 0x5c, 0x44, 0xec, 0x9f, 0xda, 0x78, 0xca, 0x24, 0xc8, 0x3d,
		0xb3, 0xb4, 0xe1, 0x8b, 0x7b, 0x3f, 0xd5, 0x1f, 0x74, 0xc7, 0x7e, 0x79, 0x01, 0x99, 0x7c, 0x97,
		0x10, 0x3d, 0x5e, 0x6a, 0xbf, 0xd7, 0xae, 0xab, 0x5a, 0xcd, 0x66, 0xbd, 0xb9, 0x46, 0xdd, 0xf5,
		0xd1, 0x11, 0x58, 0xae, 0x21, 0x5e, 0xce, 0x94, 0x80, 0x88, 0x1c, 0x79, 0x29, 0x02, 0xc1, 0x25,
		0xf7, 0xe0, 0x97, 0x4c, 0xb9, 0x03, 0xe2, 0x8d, 0xcc, 0xd1, 0xc0, 0xa4, 0xe1, 0x6f, 0x09, 0x61,
		0x6f, 0x41, 0xc7, 0x83, 0xd5, 0xa9, 0x3c, 0xe1, 0x2d, 0x56, 0xa7, 0xc8, 0x61, 0xab, 0xaf, 0x3b,
		0x63, 0xa6, 0xdd, 0x5b, 0xec, 0x5e, 0x44, 0x6d, 0x5e, 0x43, 0x55, 0x07, 0x02, 0x32, 0xae, 0x17,
		0xde, 0xf3, 0xd3, 0xa7, 0x85, 0x6f, 0xdb, 0x8b, 0xb3, 0xf5, 0x35, 0xf1, 0x77, 0x42, 0x01, 0x00,
		0xea, 0x89, 0x3f, 0x3c, 0x1d, 0x3c, 0x1d, 0x3c, 0xdd, 0xba, 0x78, 0x3a, 0xcf, 0xd0, 0x4b, 0xec,
		0xe6, 0x6c, 0x47, 0x73, 0x98, 0xb8, 0x6f, 0x9b, 0x8b, 0x29, 0x38, 0xb1, 0x68, 0x1f, 0x0e, 0x0d,
		0x0e, 0x0d, 0x89, 0x45, 0xdb, 0x48, 0x2c, 0x2a, 0x8b, 0x19, 0x53, 0x9b, 0xb3, 0x34, 0xb3, 0x96,
		0x66, 0xde, 0x12, 0xcd, 0x9c, 0x26, 0x3c, 0x86, 0xc4, 0xa2, 0xcc, 0x75, 0x45, 0x62, 0x11, 0x81,
		0x4c, 0x24, 0x16, 0x2d, 0xfd, 0x43, 0x62, 0xd1, 0xc7, 0x51, 0x4e, 0x24, 0x16, 0x21, 0xb1, 0x08,
		0x89, 0x45, 0x48, 0x2c, 0x02, 0xce, 0x07, 0xce, 0xff, 0xb0, 0x38, 0x1f, 0x89, 0x45, 0x59, 0x0a,
		0x86, 0xc4, 0x22, 0x24, 0x16, 0x21, 0xb1, 0x88, 0x0e, 0x3b, 0x6d, 0x23, 0xb1, 0x28, 0xfd, 0x98,
		0xb6, 0xbe, 0x89, 0x45, 0xf3, 0x85, 0x99, 0xbc, 0x16, 0xa0, 0xa4, 0x6e, 0x9f, 0xff, 0xca, 0x9e,
		0x12, 0x22, 0xda, 0xdb, 0x82, 0xd0, 0x57, 0xf9, 0xa6, 0xdb, 0xce, 0xb1, 0xe3, 0x70, 0x6e, 0xcf,
		0xbf, 0xd4, 0x8d, 0xce, 0x4b, 0xa7, 0x19, 0x9e, 0x91, 0x1b, 0xd3, 0xf1, 0x98, 0x63, 0x21, 0xee,
		0x52, 0xfb, 0x2d, 0x2e, 0xa4, 0x6b, 0x8d, 0x98, 0xc5, 0x46, 0x9f, 0x9f, 0x16, 0x22, 0xa4, 0xf6,
		0x87, 0xa0, 0x55, 0x14, 0x60, 0x0d, 0x0a, 0xd7, 0x02, 0xa9, 0x35, 0x1d, 0x3a, 0xc6, 0x02, 0xb3,
		0xf5, 0x5f, 0xcb, 0xd3, 0xf3, 0x8a, 0x73, 0x77, 0xfa, 0x26, 0xfc, 0xcb, 0xcb, 0xab, 0x83, 0x17,
		0x14, 0xf0, 0x28, 0x09, 0xf7, 0x5e, 0x9e, 0x6c, 0x4a, 0x99, 0x39, 0xe6, 0x78, 0xb9, 0xe5, 0x32,
		0x62, 0x19, 0xb0, 0x28, 0x49, 0x9d, 0xc9, 0x96, 0x8e, 0x45, 0x29, 0xf3, 0x4c, 0x53, 0x20, 0x23,
		0x86, 0x27, 0x03, 0x26, 0x26, 0xe3, 0xc5, 0x37, 0x80, 0x1c, 0xcd, 0x35, 0x5b, 0xe6, 0x0a, 0x57,
		0xa6, 0x0a, 0x37, 0xdd, 0xd9, 0x3e, 0x0c, 0xf5, 0x03, 0x18, 0x2a, 0x58, 0x4c, 0x65, 0xc4, 0x6a,
		0x41, 0x74, 0x96, 0x43, 0x6c, 0x15, 0x2c, 0xa6, 0x40, 0xdf, 0xf1, 0xe8, 0x3b, 0x43, 0xc0, 0xc0,
		0x95, 0x4c, 0x69, 0xbe, 0x98, 0xf0, 0xa7, 0xf4, 0x79, 0xd9, 0x26, 0xf1, 0x5c, 0x93, 0x76, 0xae,
		0x49, 0x7a, 0xb6, 0x49, 0xf9, 0x7b, 0x6d, 0x92, 0x51, 0x61, 0xe4, 0x29, 0x8a, 0x92, 0x0a, 0xa2,
		0x65, 0x99, 0x3b, 0xaf, 0x56, 0x3a, 0x97, 0xe8, 0x08, 0x86, 0x94, 0x0d, 0x48, 0xd5, 0x70, 0xf1,
		0x95, 0x8a, 0x16, 0x39, 0xa6, 0xb8, 0x8a, 0xcd, 0x0c, 0xdb, 0xb4, 0x52, 0x1f, 0x02, 0x12, 0xbe,
		0x1d, 0xe7, 0x7f, 0xac, 0xe3, 0xf9, 0x1f, 0xc1, 0x3e, 0x4c, 0x7f, 0xf4, 0x47, 0xe8, 0x29, 0x9c,
		0xfa, 0x81, 0x53, 0x3f, 0xa2, 0x37, 0xe2, 0xd4, 0x0f, 0xcc, 0x97, 0xd7, 0x6e, 0xbe, 0x1c, 0xf4,
		0x6b, 0x42, 0xd3, 0xe6, 0x65, 0x41, 0x98, 0x3d, 0x63, 0xf6, 0x8c, 0xd9, 0x33, 0x66, 0xcf, 0x59,
		0xb0, 0x7d, 0x08, 0x5e, 0x87, 0xbe, 0x15, 0x70, 0xf2, 0x07, 0xaf, 0x67, 0x14, 0xf4, 0x88, 0x58,
		0xb9, 0xc2, 0x00, 0x4f, 0xe9, 0xb9, 0x8a, 0x5f, 0xb9, 0x5a, 0xb6, 0x83, 0xfc, 0x6d, 0xf8, 0xc5,
		0x0d, 0xd9, 0xdc, 0x06, 0x3c, 0x7f, 0x1a, 0xf0, 0x1c, 0xd6, 0x5b, 0x18, 0x3c, 0x5f, 0x8c, 0xa3,
		0x62, 0xd0, 0xdc, 0x13, 0x82, 0xd3, 0x7b, 0x00, 0xcb, 0x71, 0x7a, 0x0f, 0x49, 0x28, 0x86, 0xc8,
		0x58, 0x84, 0x8d, 0x86, 0xc2, 0x78, 0xa8, 0x8d, 0x88, 0xca, 0x98, 0xc8, 0x8d, 0x8a, 0xdc, 0xb8,
		0x24, 0x18, 0x19, 0x9f, 0xb1, 0x71, 0x1a, 0x9d, 0xb0, 0xf1, 0xf9, 0x02, 0xd8, 0xef, 0xe1, 0x78,
		0x3a, 0x62, 0xea, 0xbd, 0x3e, 0x76, 0x98, 0x45, 0xb7, 0xe9, 0x6e, 0x49, 0x2e, 0xb6, 0xdc, 0xe5,
		0x65, 0xbc, 0xd4, 0x46, 0x2c, 0xcd, 0x98, 0xa5, 0x19, 0xb5, 0x44, 0xe3, 0x16, 0x33, 0x72, 0x41,
		0x63, 0x17, 0x0f, 0x84, 0xd1, 0x07, 0xc6, 0x88, 0x02, 0x65, 0x74, 0xed, 0x2b, 0xb2, 0x05, 0x99,
		0x0b, 0xb0, 0x27, 0xb6, 0x29, 0x07, 0x72, 0x87, 0xdf, 0x83, 0xdf, 0x83, 0xdf, 0x83, 0xdf, 0x2b,
		0x3d, 0xec, 0x2c, 0x74, 0xe3, 0xdf, 0x8a, 0x05, 0x87, 0x60, 0xf0, 0x2f, 0xf8, 0x65, 0x0d, 0x78,
		0xc4, 0x85, 0x06, 0x1f, 0x8a, 0x41, 0x07, 0xfc, 0xb9, 0x98, 0x09, 0x83, 0x3f, 0xb7, 0xcc, 0xfc,
		0xb9, 0x9e, 0x71, 0x83, 0x33, 0x37, 0x97, 0x70, 0x1e, 0x38, 0x73, 0xe1, 0xc4, 0x10, 0xce, 0x43,
		0x38, 0x0f, 0xd3, 0x5a, 0x4c, 0x6b, 0x31, 0xad, 0x45, 0x38, 0x0f, 0xe1, 0x3c, 0xf8, 0x3d, 0xf8,
		0x3d, 0xf8, 0x3d, 0x84, 0xf3, 0xca, 0x10, 0xce, 0xdb, 0x3c, 0xf6, 0x2e, 0x9e, 0x3c, 0x2f, 0xb0,
		0x73, 0xad, 0x0b, 0x3b, 0x17, 0x87, 0x8e, 0xd3, 0x73, 0x72, 0xf5, 0x3c, 0xe1, 0x73, 0x3a, 0xae,
		0xf9, 0xe7, 0xeb, 0xcc, 0x01, 0xa5, 0x8f, 0xbe, 0xa3, 0x21, 0x94, 0x5d, 0x0c, 0x52, 0x1f, 0x90,
		0xfa, 0xc8, 0x42, 0x83, 0xd8, 0xa4, 0x88, 0x4d, 0x8a, 0xc8, 0x86, 0x96, 0x31, 0x09, 0xc2, 0x26,
		0x45, 0x0c, 0xe9, 0xa1, 0x21, 0xbd, 0x74, 0xc4, 0x3e, 0xd9, 0x1c, 0x1e, 0xf8, 0x7d, 0x72, 0xd0,
		0x12, 0x71, 0x56, 0x9f, 0x00, 0xfa, 0xde, 0x00, 0x42, 0x9f, 0x30, 0xa7, 0x8e, 0x08, 0x97, 0xcf,
		0xf4, 0x87, 0x3d, 0xb4, 0xf4, 0xc9, 0x9c, 0xd5, 0xf6, 0x7d, 0x2e, 0x9f, 0xd0, 0xed, 0xe0, 0xf2,
		0x59, 0x47, 0x2e, 0x9f, 0xd1, 0x93, 0xa1, 0x3d, 0xea, 0x43, 0x35, 0x5d, 0xd7, 0x47, 0x5a, 0x3c,
		0xfe, 0x71, 0xb0, 0xfb, 0x80, 0xdd, 0x27, 0x9d, 0xaa, 0x65, 0x9f, 0x45, 0xc7, 0x4a, 0xc1, 0xa4,
		0x1a, 0x93, 0xea, 0xfc, 0x27, 0xd5, 0x22, 0xf3, 0x68, 0x4c, 0x9d, 0x31, 0x75, 0xde, 0xec, 0xa9,
		0x33, 0x7f, 0xe6, 0xa6, 0x48, 0xc6, 0x66, 0x30, 0x53, 0xd3, 0x9b, 0x4c, 0xee, 0xa5, 0xe5, 0xcb,
		0xe0, 0x98, 0x82, 0xef, 0x72, 0xd1, 0x10, 0xd8, 0x24, 0x3c, 0x04, 0x36, 0x88, 0x08, 0xe0, 0x3f,
		0x36, 0x90, 0x88, 0x40, 0x84, 0xaf, 0x63, 0x95, 0xbd, 0x80, 0x92, 0x00, 0x39, 0xcc, 0x45, 0x9a,
		0x1b, 0x9f, 0xd9, 0x71, 0x9a, 0x9f, 0xb0, 0x19, 0xfa, 0x02, 0x90, 0xb7, 0x97, 0x83, 0x81, 0xca,
		0x32, 0x54, 0x6a, 0x83, 0x95, 0x66, 0xb8, 0xd2, 0x0c, 0x58, 0xa2, 0x21, 0x8b, 0x19, 0xb4, 0xa0,
		0x61, 0x8b, 0xe3, 0x74, 0x09, 0xb8, 0x9d, 0x12, 0xc7, 0xbf, 0x8f, 0xeb, 0xf9, 0x37, 0x60, 0x89,
		0xf7, 0x9c, 0x48, 0x26, 0xb4, 0xd8, 0xc6, 0xac, 0x28, 0xc4, 0x11, 0xd8, 0xa0, 0x45, 0x04, 0x72,
		0xb8, 0x03, 0x66, 0xf0, 0xa9, 0xf0, 0xa9, 0x25, 0xf4, 0xa9, 0xa2, 0xa0, 0xc9, 0x17, 0x44, 0xbc,
		0x01, 0x2c, 0xa2, 0xd2, 0xa4, 0x1b, 0xc1, 0x88, 0x01, 0x16, 0x39, 0xd0, 0x92, 0xe1, 0x1c, 0x64,
		0x3b, 0x09, 0x59, 0xce, 0x42, 0xba, 0xd3, 0x90, 0xee, 0x3c, 0x72, 0x70, 0x22, 0x34, 0xce, 0x84,
		0xc8, 0xa9, 0xd0, 0x03, 0xb6, 0x18, 0x24, 0x40, 0xb4, 0xe1, 0x22, 0x02, 0x0b, 0x0e, 0x4b, 0x72,
		0x90, 0x3b, 0x41, 0x1f, 0xd0, 0x4c, 0x68, 0x65, 0x4c, 0x6c, 0xe1, 0x7f, 0xe1, 0x7f, 0xe1, 0x7f,
		0xe1, 0x7f, 0xcb, 0xec, 0x7f, 0x0b, 0x85, 0xe5, 0x44, 0x1b, 0xe3, 0xde, 0x26, 0xe2, 0x5c, 0xb9,
		0x76, 0xc1, 0x44, 0xa7, 0xbd, 0xd8, 0xf4, 0xa7, 0xd8, 0xab, 0x52, 0xb6, 0xcf, 0x11, 0x04, 0x32,
		0x72, 0x8d, 0x46, 0xf3, 0x6f, 0xaf, 0xf3, 0x45, 0x08, 0x6d, 0xb3, 0xf3, 0xa5, 0x50, 0x6c, 0xb7,
		0x7b, 0x13, 0x46, 0xb0, 0xed, 0xce, 0x17, 0x26, 0xb4, 0xfd, 0x4e, 0xb4, 0x7f, 0x8a, 0xdd, 0x7a,
		0x4a, 0x6d, 0x59, 0x8a, 0x50, 0x90, 0x6e, 0x65, 0xfa, 0x70, 0xb0, 0x50, 0x77, 0xa7, 0xf3, 0x42,
		0x05, 0x2f, 0x72, 0x6f, 0xe9, 0xe3, 0xb7, 0x4b, 0x77, 0x03, 0x37, 0x6a, 0x52, 0x68, 0x44, 0x29,
		0x92, 0x3f, 0xb8, 0x42, 0xbe, 0x42, 0x21, 0x5e, 0xe1, 0x74, 0x8f, 0x7d, 0xa4, 0x7b, 0x20, 0xdd,
		0x43, 0x7a, 0xc8, 0x54, 0x09, 0x1e, 0x46, 0xac, 0x8d, 0x46, 0x16, 0xb3, 0x6d, 0xf1, 0xb4, 0x8f,
		0x38, 0xa1, 0xe0, 0xe1, 0x44, 0xfa, 0x47, 0x09, 0x26, 0xc7, 0xeb, 0xca, 0xc3, 0xa9, 0x4f, 0x04,
		0x2d, 0x29, 0x34, 0x28, 0x1d, 0x09, 0xc8, 0x58, 0xd4, 0xe9, 0x56, 0xa8, 0x67, 0x09, 0xd7, 0x15,
		0xf5, 0xc9, 0xaf, 0x06, 0x41, 0xdb, 0x44, 0x27, 0xfd, 0x34, 0x8b, 0xe6, 0x0e, 0xb3, 0x0c, 0xe1,
		0xe6, 0xf2, 0x05, 0xfe, 0xb3, 0xb3, 0x73, 0x5b, 0x55, 0x8f, 0x06, 0xb3, 0xdb, 0x9a, 0x7a, 0x34,
		0x98, 0x7f, 0xac, 0x79, 0x7f, 0xe6, 0x9f, 0xf7, 0x6f, 0xab, 0x6a, 0xe3, 0xf5, 0x73, 0xf3, 0xb6,
		0xaa, 0x36, 0x07, 0x95, 0xef, 0xdf, 0x3f, 0x55, 0x9e, 0xeb, 0x6e, 0xf6, 0x07, 0xff, 0x10, 0x8f,
		0x41, 0x0d, 0x8a, 0x8c, 0x58, 0xd0, 0x2a, 0x59, 0xeb, 0xa3, 0x29, 0x99, 0xa6, 0xde, 0x1f, 0xab,
		0x67, 0x83, 0xe7, 0xda, 0x6e, 0xc3, 0x6d, 0x57, 0x9e, 0x0f, 0xdc, 0xe5, 0x8b, 0xb3, 0xb8, 0xdb,
		0x6a, 0xbb, 0x07, 0x6e, 0x3b, 0xe1, 0x97, 0x96, 0xdb, 0x4e, 0x29, 0xa3, 0xe9, 0xee, 0x44, 0x6e,
		0x7d, 0xb9, 0xbe, 0x9f, 0xf4, 0x40, 0x23, 0xe1, 0x81, 0x7a, 0xd2, 0x03, 0xf5, 0x84, 0x07, 0x12,
		0x8b, 0xb4, 0x9f, 0xf0, 0x40, 0xd3, 0x9d, 0x45, 0xee, 0xdf, 0x89, 0xbf, 0xb5, 0xe5, 0x56, 0x66,
		0x49, 0xbf, 0x1d, 0xb8, 0xb3, 0x76, 0xa5, 0x04, 0x26, 0xb7, 0x95, 0xef, 0x7b, 0xf3, 0x21, 0x63,
		0x0e, 0x02, 0xd2, 0x89, 0x69, 0x39, 0xb4, 0x10, 0xd7, 0x93, 0x08, 0x7c, 0x0b, 0x7c, 0x0b, 0x7c,
		0xcb, 0xad, 0x3b, 0x53, 0xdd, 0x70, 0x6a, 0x2d, 0x02, 0x6c, 0xdb, 0x12, 0x10, 0x71, 0xa3, 0x19,
		0x0f, 0xa5, 0xc0, 0xb6, 0x97, 0xba, 0x41, 0x98, 0xd8, 0x46, 0xbb, 0x9e, 0xfd, 0xa7, 0x36, 0x9e,
		0x32, 0x42, 0x79, 0x67, 0x96, 0x36, 0x7c, 0x71, 0xa3, 0xa7, 0xfa, 0x83, 0xee, 0x45, 0xf0, 0xab,
		0xa5, 0xc8, 0x53, 0xb8, 0xd4, 0x7e, 0x97, 0xbe, 0x0b, 0x5a, 0xcd, 0x66, 0xbd, 0x59, 0xe2, 0x6e,
		0x00, 0x12, 0x89, 0x34, 0x33, 0x33, 0x86, 0xe6, 0x48, 0x37, 0x08, 0x4e, 0x7a, 0xf5, 0x25, 0x01,
		0x79, 0x00, 0x79, 0x00, 0x79, 0xf0, 0x4f, 0xed, 0x47, 0xcc, 0x70, 0x74, 0xe7, 0x89, 0xe8, 0x94,
		0x1b, 0x01, 0x7f, 0xac, 0x5c, 0x2c, 0x8a, 0xf2, 0x59, 0xb3, 0x09, 0x77, 0x28, 0x9c, 0x1e, 0xf7,
		0x8f, 0xef, 0x3a, 0x57, 0x27, 0xdd, 0xd3, 0x8b, 0xab, 0x2f, 0x77, 0x97, 0x9d, 0xfe, 0x79, 0xf7,
		0x54, 0x54, 0x1f, 0xbd, 0x11, 0xc8, 0x26, 0x09, 0x39, 0x10, 0x67, 0x02, 0x76, 0xae, 0x4e, 0xee,
		0xfe, 0xbe, 0xfc, 0xa6, 0x94, 0x01, 0x44, 0x48, 0xa8, 0xda, 0xf5, 0x4d, 0xb7, 0xdf, 0xad, 0x6f,
		0x6a, 0xed, 0xfe, 0xd7, 0xeb, 0x5e, 0xdd, 0x5d, 0x74, 0xfa, 0x67, 0x45, 0x6f, 0x61, 0x18, 0xe4,
		0xed, 0x06, 0x73, 0x01, 0x1f, 0x3f, 0x99, 0x66, 0x39, 0x3f, 0x98, 0xe6, 0xa8, 0xba, 0xe1, 0x30,
		0xeb, 0x97, 0x36, 0x16, 0x87, 0x21, 0x31, 0x32, 0x01, 0x48, 0x00, 0x48, 0x00, 0x48, 0x84, 0x42,
		0x21, 0xad, 0x06, 0x01, 0x16, 0x39, 0x44, 0x28, 0x04, 0xa1, 0x90, 0x0f, 0x12, 0x0a, 0xa9, 0x1d,
		0x36, 0x1a, 0xad, 0x83, 0x46, 0xa3, 0x7a, 0x50, 0x3f, 0xa8, 0x1e, 0x35, 0x9b, 0xb5, 0x56, 0x0d,
		0x91, 0x91, 0xb5, 0x8a, 0x8c, 0x70, 0xb0, 0xb9, 0xc5, 0xcc, 0xe5, 0x00, 0x3e, 0x00, 0x3e, 0x00,
		0x3e, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x3e, 0x52, 0x36, 0xb3, 0x69, 0xe9,
		0x0f, 0xba, 0xa1, 0x39, 0x6c, 0xa4, 0xfe, 0x67, 0xda, 0xea, 0xa3, 0x66, 0xfd, 0x4b, 0xb2, 0x48,
		0x93, 0x20, 0x17, 0x20, 0x05, 0x20, 0x05, 0x20, 0x85, 0x5b, 0x77, 0x46, 0xf6, 0x70, 0x42, 0x00,
		0x51, 0x9a, 0x80, 0x28, 0x80, 0x28, 0x1f, 0x25, 0x55, 0xa4, 0x0e, 0x40, 0xb2, 0x4e, 0x80, 0x64,
		0x62, 0x99, 0x8e, 0x39, 0x34, 0x09, 0x16, 0x68, 0x7c, 0x49, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x1d,
		0x02, 0xb1, 0xc5, 0x0d, 0xcf, 0x13, 0xe9, 0xf5, 0x6f, 0x3a, 0xc7, 0x97, 0xf3, 0x0c, 0x83, 0x93,
		0xee, 0xb7, 0xcd, 0x4d, 0x11, 0x59, 0x54, 0xb4, 0xd7, 0x3b, 0xdf, 0xc4, 0x3c, 0x8a, 0x45, 0xed,
		0xbe, 0xdc, 0x5c, 0x9f, 0x6c, 0x70, 0xf5, 0xfe, 0xea, 0x7c, 0xee, 0x75, 0x4f, 0xbe, 0x76, 0xfa,
		0x77, 0x9b, 0x5d, 0x4f, 0x2f, 0x23, 0x66, 0xb3, 0xab, 0xd8, 0x3f, 0xbf, 0xb9, 0x38, 0xa3, 0xea,
		0x47, 0x64, 0xfd, 0x44, 0x9a, 0xdb, 0xd6, 0x1e, 0x27, 0x63, 0x46, 0x98, 0xf2, 0xb3, 0x2c, 0x10,
		0xc0, 0x12, 0xc0, 0x12, 0xc0, 0x92, 0x5b, 0x77, 0xb0, 0xe4, 0x86, 0x78, 0x16, 0xe2, 0x59, 0x19,
		0xbb, 0x00, 0x4b, 0x6e, 0xeb, 0x1e, 0xe1, 0xb2, 0xa7, 0x93, 0x89, 0xc5, 0x6c, 0x5b, 0xb5, 0xd8,
		0x68, 0x6a, 0x8c, 0x34, 0x83, 0x60, 0x57, 0x76, 0x8c, 0x4c, 0x80, 0x13, 0x80, 0x13, 0x80, 0x13,
		0x6e, 0xdd, 0xf9, 0x61, 0x9a, 0x63, 0xa6, 0x19, 0x14, 0x11, 0xaf, 0x1a, 0x98, 0x18, 0xf3, 0x67,
		0x62, 0xcc, 0x4e, 0x6e, 0xeb, 0x16, 0x74, 0xfc, 0xef, 0x82, 0x9c, 0x36, 0x75, 0x0a, 0x27, 0x1f,
		0x15, 0xad, 0x10, 0xf5, 0xac, 0x10, 0xd5, 0x2c, 0x1f, 0xb5, 0x6c, 0xda, 0xd6, 0xe3, 0x54, 0xcb,
		0x7c, 0xd5, 0x51, 0xc9, 0xc4, 0xd9, 0x29, 0xc4, 0x00, 0x9b, 0x4e, 0xe7, 0x5d, 0xc9, 0x67, 0xb3,
		0x67, 0xec, 0x15, 0x69, 0xbd, 0xb1, 0xba, 0x35, 0x92, 0xeb, 0xb8, 0xa2, 0x7e, 0xca, 0x84, 0x59,
		0xb6, 0x6e, 0x3b, 0x2c, 0x05, 0x6e, 0x7b, 0x5b, 0x8b, 0x7c, 0x7b, 0xe6, 0x9d, 0x96, 0x4b, 0x47,
		0x9f, 0x9a, 0x1a, 0x67, 0x65, 0xc1, 0x53, 0xbc, 0xb8, 0x29, 0x2b, 0x3e, 0xe2, 0xc6, 0x41, 0xdc,
		0x78, 0x47, 0x00, 0xd7, 0x88, 0xd9, 0x41, 0x5a, 0x7a, 0x52, 0x25, 0xe4, 0x2d, 0x52, 0x37, 0xe4,
		0x1b, 0xfc, 0xcf, 0xec, 0x6b, 0x32, 0xf2, 0xf4, 0x66, 0x06, 0xf6, 0x3c, 0x40, 0x5e, 0x14, 0xb8,
		0xf3, 0x02, 0x75, 0x61, 0x60, 0x2e, 0x0c, 0xc4, 0x09, 0x80, 0x37, 0x2d, 0x28, 0xc9, 0xca, 0xab,
		0xab, 0x0c, 0x5f, 0xf5, 0x83, 0x93, 0x6b, 0x7a, 0xf1, 0x3c, 0xce, 0x16, 0x97, 0x3d, 0x1b, 0x05,
		0xd9, 0x34, 0xf7, 0x14, 0x88, 0x9b, 0x6c, 0x1a, 0xe4, 0x37, 0x08, 0xef, 0x20, 0xbc, 0x53, 0xa6,
		0xf0, 0x0e, 0xc8, 0x6f, 0x38, 0x64, 0x83, 0xfc, 0xa6, 0xa0, 0xaa, 0x81, 0xfc, 0x46, 0xaa, 0x3b,
		0x7a, 0xfd, 0xb7, 0x99, 0x69, 0x30, 0x63, 0x73, 0xa8, 0x8d, 0x55, 0xdb, 0x1b, 0xe4, 0xe8, 0x8e,
		0xba, 0x88, 0x95, 0x0a, 0x50, 0x02, 0x50, 0x02, 0x50, 0xc2, 0x0f, 0x4a, 0x70, 0xd6, 0x45, 0x62,
		0xcb, 0xe0, 0xac, 0x0b, 0x9c, 0x75, 0x21, 0x5f, 0xc9, 0x70, 0xd6, 0x05, 0xce, 0xba, 0xc0, 0x59,
		0x17, 0xd4, 0xef, 0x05, 0x95, 0x01, 0xb0, 0x2e, 0xb0, 0x2e, 0xb0, 0x2e, 0xa8, 0x0c, 0xe2, 0x0b,
		0x82, 0xd4, 0xef, 0xa2, 0xa3, 0x5a, 0xa0, 0x32, 0x28, 0x34, 0xf0, 0x06, 0x2a, 0x83, 0xd5, 0xce,
		0x12, 0x54, 0x06, 0x00, 0x1d, 0x00, 0x1d, 0x58, 0xf5, 0x7b, 0xb7, 0x82, 0xa0, 0x32, 0x28, 0x06,
		0x3f, 0x80, 0xca, 0x80, 0xa3, 0x7a, 0xa0, 0x32, 0xd8, 0x98, 0x2a, 0x82, 0xca, 0x40, 0x2e, 0x94,
		0x0c, 0x26, 0xf8, 0xaa, 0x14, 0x84, 0xe1, 0xcb, 0x02, 0x01, 0x2c, 0x01, 0x2c, 0x01, 0x2c, 0xf9,
		0xcd, 0xc9, 0xb1, 0xf8, 0x63, 0xc2, 0x21, 0x4c, 0x79, 0x88, 0xcd, 0x82, 0x34, 0xfb, 0x81, 0xde,
		0xb6, 0xdc, 0x84, 0x7e, 0xd8, 0x5b, 0x24, 0x9a, 0xcb, 0xda, 0x1a, 0x98, 0x61, 0xb7, 0x42, 0xf0,
		0x28, 0xed, 0x07, 0xcb, 0x9c, 0x4e, 0x6c, 0xfe, 0xf4, 0xf9, 0x18, 0x59, 0x48, 0xa5, 0x97, 0xed,
		0xaa, 0x91, 0x4a, 0xcf, 0xed, 0x20, 0xb8, 0x53, 0xe9, 0x23, 0x8a, 0x4e, 0x7b, 0xa4, 0xfd, 0x5c,
		0xa4, 0x18, 0x1a, 0xaa, 0x01, 0x0d, 0x01, 0x0d, 0xad, 0x1f, 0x1a, 0xe2, 0x35, 0x49, 0x5f, 0x00,
		0xe7, 0x16, 0xb0, 0x44, 0x15, 0xe4, 0xda, 0x12, 0x46, 0x6c, 0x94, 0x64, 0xc6, 0x49, 0x69, 0xa4,
		0xb2, 0x8c, 0x95, 0xda, 0x68, 0xa5, 0x19, 0xaf, 0x34, 0x23, 0x96, 0x68, 0xcc, 0x34, 0xe1, 0x0d,
		0xc1, 0x08, 0x90, 0xb0, 0x91, 0xfb, 0x82, 0xbc, 0x81, 0x52, 0x24, 0x14, 0x91, 0xa8, 0xcc, 0xbe,
		0xe4, 0xdd, 0x52, 0xae, 0xc6, 0x52, 0x39, 0x02, 0x19, 0x0e, 0x41, 0xb6, 0x63, 0x90, 0xe5, 0x20,
		0xa4, 0x3b, 0x0a, 0xe9, 0x0e, 0x23, 0x07, 0xc7, 0x41, 0xe3, 0x40, 0x88, 0x1c, 0x09, 0x5d, 0x0c,
		0x25, 0x51, 0x77, 0xc7, 0x4c, 0xbb, 0x17, 0x5b, 0xa8, 0x4b, 0xc4, 0x02, 0x07, 0x84, 0x32, 0xaf,
		0x17, 0x41, 0x8a, 0x4f, 0x9f, 0xf6, 0xa2, 0xff, 0xa3, 0xd3, 0xf2, 0xe8, 0xa5, 0x3d, 0xdf, 0xe1,
		0x6d, 0x95, 0x43, 0x3d, 0x8a, 0x1d, 0xa1, 0x04, 0x43, 0x47, 0x79, 0x86, 0x92, 0x52, 0xf5, 0x2e,
		0x4f, 0xbc, 0x89, 0xae, 0x47, 0x04, 0x7a, 0x83, 0x6e, 0x88, 0xa7, 0x1e, 0xda, 0x89, 0x86, 0x74,
		0x60, 0x7a, 0x60, 0xfa, 0x4d, 0xc0, 0xf4, 0x64, 0x43, 0xb0, 0x84, 0xa1, 0x97, 0x72, 0xc8, 0x0d,
		0x0e, 0xb5, 0x73, 0xaf, 0x4a, 0x34, 0x74, 0x16, 0xe3, 0x5e, 0xe7, 0x14, 0x85, 0x64, 0xbe, 0x75,
		0x2e, 0xae, 0x64, 0xc1, 0x92, 0x7d, 0x38, 0x56, 0x38, 0x56, 0x04, 0x4b, 0x10, 0x2c, 0x41, 0xb0,
		0x04, 0xc1, 0x12, 0x04, 0x4b, 0x10, 0x2c, 0x41, 0xb0, 0x04, 0xc1, 0x92, 0x15, 0xbd, 0xcb, 0x41,
		0xdb, 0x4d, 0x08, 0xe6, 0x73, 0x5d, 0x6e, 0x5d, 0xd0, 0x7e, 0x0b, 0x0e, 0xe0, 0x7c, 0x64, 0xe0,
		0x11, 0x29, 0x22, 0xe4, 0xe0, 0x51, 0x61, 0x02, 0x64, 0xe1, 0x11, 0x61, 0x5c, 0xe4, 0xe1, 0x54,
		0x7d, 0x44, 0x64, 0x5e, 0x45, 0x9b, 0x95, 0x22, 0x34, 0x4b, 0x4d, 0x4f, 0x47, 0x1e, 0xfc, 0x76,
		0x77, 0xfa, 0x56, 0x8a, 0x2f, 0x5e, 0x21, 0x90, 0xd8, 0x98, 0xb7, 0x26, 0x94, 0x21, 0xc9, 0xd1,
		0x66, 0x86, 0x6d, 0x5a, 0xea, 0xc4, 0x32, 0xef, 0xf5, 0x31, 0x13, 0xc8, 0x70, 0x5c, 0x16, 0x84,
		0xf4, 0x46, 0xd9, 0x13, 0x0f, 0xa4, 0x37, 0x72, 0xbb, 0x09, 0xee, 0xf4, 0xc6, 0xb0, 0x96, 0x13,
		0xec, 0xf3, 0x08, 0xcb, 0x43, 0x62, 0x23, 0x12, 0x1b, 0x4b, 0x30, 0x4b, 0x47, 0x62, 0x23, 0x12,
		0x1b, 0x8b, 0x08, 0xc9, 0x21, 0x56, 0x8f, 0x58, 0xfd, 0x7b, 0x82, 0x7e, 0x32, 0xcd, 0x72, 0x7e,
		0x30, 0xcd, 0x11, 0x3f, 0x38, 0x3a, 0x51, 0xad, 0x63, 0xde, 0x81, 0xf8, 0x7d, 0xd9, 0x9c, 0x85,
		0x2c, 0xa7, 0x21, 0xdd, 0x79, 0x48, 0x77, 0x22, 0x39, 0x38, 0x13, 0xba, 0x00, 0xed, 0xf6, 0x5a,
		0xc4, 0xef, 0x85, 0xcf, 0xc2, 0x4e, 0xf2, 0x04, 0x87, 0x84, 0x22, 0x69, 0x08, 0xd3, 0x96, 0xff,
		0xd1, 0x5a, 0xd5, 0x36, 0x35, 0xa1, 0x9a, 0x64, 0x17, 0x1b, 0x11, 0x4f, 0x4c, 0xb8, 0x16, 0x91,
		0x2f, 0x81, 0xfc, 0x4b, 0x92, 0xb9, 0x85, 0xbb, 0x54, 0xfb, 0xbd, 0xf6, 0x5d, 0x2a, 0xef, 0xec,
		0xee, 0x42, 0x7a, 0x79, 0xab, 0x9c, 0xd2, 0x06, 0x65, 0x59, 0x19, 0x24, 0x98, 0xaf, 0xd8, 0xda,
		0xe3, 0x64, 0xcc, 0x24, 0x22, 0xd1, 0xe5, 0x17, 0x00, 0x86, 0x02, 0x86, 0x02, 0x86, 0x02, 0x86,
		0x02, 0x86, 0x02, 0x86, 0x02, 0x86, 0x02, 0x86, 0x02, 0x86, 0x02, 0x86, 0xfa, 0xab, 0x88, 0x62,
		0x7c, 0x2b, 0xc9, 0x18, 0x34, 0x28, 0x1d, 0x00, 0x14, 0x00, 0x14, 0x00, 0xf4, 0xc3, 0x02, 0xd0,
		0x4d, 0xc8, 0x63, 0x0e, 0xfa, 0x33, 0x3b, 0xf4, 0xed, 0x75, 0xdb, 0x5a, 0xf0, 0x5a, 0x99, 0x72,
		0x99, 0x29, 0x86, 0x8a, 0xe9, 0x64, 0x62, 0x31, 0xdb, 0x56, 0x2d, 0x36, 0x9a, 0x1a, 0x23, 0xcd,
		0x33, 0x0a, 0xea, 0x01, 0x23, 0xfa, 0x0e, 0x0c, 0x1b, 0x18, 0x36, 0x30, 0x6c, 0x7c, 0xd8, 0x61,
		0xe3, 0x87, 0x69, 0x8e, 0x99, 0x66, 0xc8, 0x18, 0x36, 0x6a, 0xd8, 0x68, 0xb2, 0x5e, 0x1b, 0x4d,
		0x96, 0x12, 0x85, 0x97, 0xbe, 0xaf, 0x31, 0x1f, 0x07, 0xe9, 0x2c, 0x4c, 0xc6, 0xec, 0x0b, 0xbc,
		0x1c, 0xc5, 0x0f, 0x8f, 0x48, 0x49, 0x2b, 0x8d, 0xcf, 0xfc, 0xc0, 0xbc, 0x1c, 0x21, 0xa7, 0x02,
		0x6e, 0x0e, 0x70, 0x73, 0xc0, 0xb9, 0xc2, 0xb9, 0x92, 0x3a, 0x57, 0xe4, 0xfb, 0x22, 0x60, 0x81,
		0x80, 0x05, 0x02, 0x16, 0x6b, 0x1a, 0xb0, 0x40, 0xa2, 0x05, 0xa5, 0x5e, 0x22, 0xd1, 0x22, 0x59,
		0x3e, 0x12, 0x2d, 0x0a, 0xeb, 0x52, 0x24, 0x5a, 0xe4, 0x21, 0x0d, 0xf9, 0xbe, 0x59, 0x66, 0xa2,
		0xc8, 0xf7, 0x05, 0x0c, 0x05, 0x0c, 0x05, 0x0c, 0x05, 0x0c, 0x05, 0x0c, 0x05, 0x0c, 0x05, 0x0c,
		0x05, 0x0c, 0x05, 0x0c, 0x8d, 0xc2, 0x50, 0xe4, 0xfb, 0x02, 0x80, 0x02, 0x80, 0x02, 0x80, 0x4a,
		0x07, 0xa0, 0xc8, 0xf7, 0x5d, 0xf7, 0xa1, 0x02, 0xf9, 0xbe, 0x18, 0x36, 0x30, 0x6c, 0x60, 0xd8,
		0xc8, 0x75, 0xd8, 0x40, 0xbe, 0xaf, 0xdc, 0x2e, 0xdc, 0xa0, 0x7c, 0xdf, 0x8f, 0x47, 0x29, 0x4f,
		0x30, 0xbf, 0x02, 0xad, 0xbc, 0xcc, 0x7e, 0x5a, 0x03, 0x5a, 0xf9, 0xd5, 0x46, 0x55, 0x08, 0xa1,
		0x7c, 0xcf, 0x2b, 0xc2, 0xf5, 0xa2, 0x04, 0x60, 0x93, 0xcf, 0x55, 0x01, 0x4a, 0x41, 0x25, 0xcf,
		0x95, 0x94, 0x2b, 0x94, 0x84, 0x2b, 0x4c, 0x1b, 0xbf, 0x0f, 0xda, 0x78, 0xd0, 0xc6, 0xa7, 0x2e,
		0x27, 0x37, 0x6d, 0xfc, 0x8b, 0xdd, 0x8f, 0x74, 0xe3, 0x41, 0x9c, 0x30, 0xde, 0x97, 0x24, 0x46,
		0x15, 0x5f, 0x05, 0x55, 0x3c, 0xf9, 0x8c, 0x18, 0x54, 0xf1, 0xd2, 0x91, 0x99, 0xf0, 0x8c, 0xd5,
		0xd7, 0x1d, 0x7d, 0xc4, 0x0c, 0x47, 0x77, 0x9e, 0xc4, 0x82, 0x9b, 0xfe, 0xf8, 0x23, 0xb0, 0x60,
		0xa7, 0x5c, 0x2c, 0x8a, 0xf2, 0x59, 0xb3, 0x09, 0xf7, 0xb4, 0x9c, 0x1e, 0xf7, 0x8f, 0xef, 0x3a,
		0x57, 0x27, 0xdd, 0xd3, 0x8b, 0xab, 0x2f, 0x77, 0x97, 0x9d, 0xfe, 0x79, 0xf7, 0x54, 0x54, 0x1f,
		0xbd, 0x15, 0x4b, 0x9b, 0x64, 0xa9, 0x9f, 0x38, 0x04, 0xd9, 0xb9, 0x3a, 0xb9, 0xfb, 0xfb, 0xf2,
		0x9b, 0x52, 0x86, 0x98, 0xab, 0x84, 0xaa, 0x5d, 0xdf, 0x74, 0xfb, 0xdd, 0xfa, 0xa6, 0xd6, 0xee,
		0x7f, 0xbd, 0xee, 0xd5, 0xdd, 0x45, 0xa7, 0x7f, 0x56, 0xf4, 0xa6, 0x97, 0x41, 0xde, 0x6e, 0x70,
		0x2b, 0x87, 0x0e, 0x54, 0x04, 0xce, 0xb5, 0x0d, 0xb8, 0x4b, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x0e,
		0x7e, 0xdd, 0x11, 0x4e, 0xe5, 0x23, 0x48, 0xdd, 0x23, 0x4a, 0xd5, 0x23, 0x88, 0x37, 0x53, 0xa6,
		0xe2, 0x51, 0xaf, 0x12, 0x12, 0xa7, 0xda, 0xc9, 0x48, 0xba, 0xa2, 0x58, 0x19, 0xa6, 0x4c, 0x9d,
		0x93, 0xd5, 0x05, 0xf2, 0x52, 0xe3, 0xa4, 0xf4, 0x4a, 0x41, 0xab, 0x18, 0x83, 0x12, 0x83, 0x8f,
		0xb1, 0x39, 0xd4, 0xc6, 0xaa, 0xed, 0x0d, 0x78, 0xaa, 0x36, 0x1a, 0x59, 0xcc, 0xb6, 0xc5, 0xe1,
		0x48, 0xac, 0x54, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x7e, 0x88, 0x3f, 0x11, 0xb4, 0xa4, 0x50,
		0x40, 0xe4, 0x48, 0x40, 0xc6, 0xa2, 0x4e, 0x85, 0x83, 0x94, 0xb7, 0x96, 0xf9, 0xd5, 0x20, 0x68,
		0x9b, 0x48, 0x1b, 0x1d, 0xd2, 0x70, 0xbb, 0x38, 0xcc, 0x32, 0xc8, 0xb6, 0x5f, 0x28, 0xff, 0xec,
		0xec, 0xdc, 0x56, 0xd5, 0xa3, 0xc1, 0xec, 0xb6, 0xa6, 0x1e, 0x0d, 0xe6, 0x1f, 0x6b, 0xde, 0x9f,
		0xf9, 0xe7, 0xfd, 0xdb, 0xaa, 0xda, 0x78, 0xfd, 0xdc, 0xbc, 0xad, 0xaa, 0xcd, 0x41, 0xe5, 0xfb,
		0xf7, 0x4f, 0x95, 0xe7, 0xba, 0x9b, 0xfd, 0xc1, 0x3f, 0xc4, 0x67, 0xfc, 0x83, 0x22, 0xf3, 0x30,
		0x68, 0x95, 0xac, 0xf5, 0xd1, 0x94, 0x4c, 0x53, 0xef, 0x8f, 0xd5, 0xb3, 0xc1, 0x73, 0x6d, 0xb7,
		0xe1, 0xb6, 0x2b, 0xcf, 0x07, 0xee, 0xf2, 0xc5, 0x59, 0xdc, 0x6d, 0xb5, 0xdd, 0x03, 0xb7, 0x9d,
		0xf0, 0x4b, 0xcb, 0x6d, 0xa7, 0x94, 0xd1, 0x74, 0x77, 0x22, 0xb7, 0xbe, 0x5c, 0xdf, 0x4f, 0x7a,
		0xa0, 0x91, 0xf0, 0x40, 0x3d, 0xe9, 0x81, 0x7a, 0xc2, 0x03, 0x89, 0x45, 0xda, 0x4f, 0x78, 0xa0,
		0xe9, 0xce, 0x22, 0xf7, 0xef, 0xc4, 0xdf, 0xda, 0x72, 0x2b, 0xb3, 0xa4, 0xdf, 0x0e, 0xdc, 0x59,
		0xbb, 0x52, 0x02, 0x93, 0xdb, 0x48, 0x9c, 0x6b, 0x5a, 0xfa, 0x83, 0x6e, 0x68, 0x0e, 0x1b, 0xa9,
		0xff, 0x99, 0xb6, 0xfa, 0xa8, 0x59, 0xff, 0x92, 0xac, 0xf7, 0x25, 0xc8, 0x05, 0xd6, 0x05, 0xd6,
		0x05, 0xd6, 0xe5, 0xd6, 0x9d, 0x91, 0x3d, 0x9c, 0x10, 0xa0, 0xdc, 0x26, 0x42, 0x71, 0x08, 0xc5,
		0x7d, 0x90, 0x50, 0x5c, 0xab, 0x8e, 0xc0, 0xdb, 0x3a, 0x01, 0x92, 0x89, 0x65, 0x3a, 0xe6, 0xd0,
		0x1c, 0x8b, 0x43, 0x10, 0x5f, 0x12, 0x40, 0x07, 0x40, 0x07, 0x40, 0x07, 0xff, 0x0c, 0x7f, 0xd3,
		0x53, 0x8e, 0x7a, 0xfd, 0x9b, 0xce, 0xf1, 0xe5, 0x3c, 0x59, 0xe5, 0xa4, 0xfb, 0x6d, 0x73, 0xb3,
		0x8d, 0x16, 0x15, 0xed, 0xf5, 0xce, 0x37, 0x31, 0x25, 0x67, 0x51, 0xbb, 0x2f, 0x37, 0xd7, 0x27,
		0x1b, 0x5c, 0xbd, 0xbf, 0x3a, 0x9f, 0x7b, 0xdd, 0x93, 0xaf, 0x9d, 0xfe, 0xdd, 0x66, 0xd7, 0xd3,
		0x4b, 0xae, 0xda, 0xec, 0x2a, 0xf6, 0xcf, 0x6f, 0x2e, 0xce, 0xa8, 0xfa, 0x11, 0x09, 0x64, 0x91,
		0xe6, 0x0e, 0x6e, 0x3c, 0x51, 0x29, 0xb2, 0xc9, 0x96, 0x05, 0x02, 0x58, 0x02, 0x58, 0x02, 0x58,
		0xf2, 0x9b, 0x93, 0x63, 0xf1, 0xc7, 0x84, 0x43, 0x98, 0xf2, 0x10, 0xdb, 0xf6, 0x24, 0x6f, 0xdb,
		0xcb, 0xbe, 0xdb, 0x59, 0xd2, 0x66, 0x3d, 0x41, 0x9f, 0x4e, 0xe4, 0xcb, 0x39, 0x7d, 0x38, 0xb7,
		0xef, 0xc6, 0x06, 0x3e, 0x19, 0x3e, 0x79, 0x6d, 0x36, 0xf0, 0x71, 0xfb, 0x5c, 0x02, 0x42, 0x24,
		0x11, 0xe2, 0xa3, 0xb8, 0x23, 0x7c, 0x96, 0xec, 0x4e, 0x96, 0x4f, 0xd9, 0x22, 0xec, 0x07, 0x9f,
		0x01, 0x81, 0xcb, 0x67, 0xf0, 0x91, 0x1e, 0x08, 0x91, 0x1c, 0x08, 0x91, 0x1a, 0xf0, 0x91, 0x18,
		0xa4, 0x6d, 0x4a, 0xce, 0x41, 0x4e, 0xe2, 0xe0, 0xa6, 0x64, 0xda, 0x2b, 0xce, 0xc7, 0x32, 0x90,
		0x4e, 0xcd, 0xdf, 0x57, 0xda, 0xd5, 0x77, 0xbc, 0xd3, 0x07, 0x59, 0xdb, 0x9e, 0xb6, 0xcd, 0x57,
		0x37, 0x41, 0x72, 0xc5, 0xe2, 0x7f, 0x49, 0xa8, 0x6a, 0xda, 0x2a, 0x12, 0x54, 0x6d, 0x85, 0xda,
		0x64, 0x51, 0x93, 0xf8, 0x66, 0x89, 0x56, 0x3a, 0x7c, 0x65, 0xa9, 0xfa, 0xef, 0x55, 0x9b, 0xab,
		0xba, 0x31, 0x15, 0x5c, 0x5d, 0xb1, 0x70, 0x55, 0xde, 0x0a, 0x3c, 0xff, 0xb4, 0x28, 0x72, 0x52,
		0x51, 0x15, 0xdd, 0x3e, 0x31, 0x1f, 0x3d, 0x3e, 0x36, 0x36, 0xea, 0x79, 0xc5, 0x8d, 0x8c, 0xed,
		0x8a, 0x6e, 0x9f, 0x69, 0xff, 0xb2, 0x1b, 0xd3, 0x8c, 0x8e, 0xfb, 0xcb, 0x55, 0x54, 0x82, 0x3f,
		0x85, 0x4a, 0x7d, 0xca, 0x7e, 0xe9, 0xc3, 0x05, 0x98, 0x75, 0xb7, 0xdc, 0xff, 0x07, 0x00, 0x00,
		0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0xfb, 0x2b, 0x96, 0xda, 0x2d, 0x02, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/encoding": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD)(0)),
	},
	"/telemetry-system/subscriptions/dynamic-subscriptions/dynamic-subscription/state/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_STREAM_PROTOCOL)(0)),
	},
	"/telemetry-system/subscriptions/persistent/subscription/config/encoding": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_DATA_ENCODING_METHOD)(0)),
	},
	"/telemetry-system/subscriptions/persistent/subscription/config/protocol": []reflect.Type{
		reflect.TypeOf((E_OpenconfigTelemetryTypes_STREAM_PROTOCOL)(0)),
	},
}

